{"version":3,"sources":["dmAppointment.ts","index.tsx"],"names":["say","text","send","_context","type","value","listen","grammar","person","day","time","closedAnswer","yes","no","dmMachine","initial","states","init","on","CLICK","welcome","RECOGNISED","target","prompt","entry","ENDSPEECH","ask","rasa_invocation","invoke","id","src","context","event","nluRequest","recResult","fetch","Request","proxyurl","method","headers","body","then","data","json","onDone","actions","assign","intent","name","onError","console","log","intent_check","cond","appointment","who","nomatch","duration","confirm","confirm_time","confirm_whole","created","final","todo","timer","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","cancel","useSpeechRecognition","onResult","result","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"+PAQA,SAASA,EAAIC,GACT,OAAOC,aAAMC,IAAD,CAA6BC,KAAM,QAASC,MAAOJ,MAGnE,SAASK,IACL,OAAOJ,YAAK,UAGhB,MAAMK,EAAoF,CACtF,KAAQ,CAAEC,OAAQ,kBAClB,OAAU,CAAEA,OAAQ,iBACpB,KAAQ,CAAEA,OAAQ,cAClB,YAAa,CAAEC,IAAK,UACpB,aAAc,CAAEA,IAAK,WACrB,eAAgB,CAAEA,IAAK,aACvB,cAAe,CAAEA,IAAK,YACtB,YAAa,CAAEA,IAAK,UACpB,WAAY,CAAEC,KAAM,QACpB,UAAW,CAAEA,KAAM,QACnB,SAAU,CAAEA,KAAM,SAClB,YAAa,CAAEA,KAAM,SACrB,YAAa,CAAEA,KAAM,SACrB,cAAe,CAAEA,KAAM,SACvB,cAAe,CAAEA,KAAM,SACvB,aAAc,CAAEA,KAAM,SACtB,aAAc,CAAEA,KAAM,SACtB,eAAgB,CAAEA,KAAM,SACxB,eAAgB,CAAEA,KAAM,UAGtBC,EAAkE,CACpE,IAAO,CAAEC,KAAK,GACd,IAAO,CAAEA,KAAK,GACd,YAAa,CAAEA,KAAK,GACpB,KAAQ,CAAEA,KAAK,GACf,GAAM,CAAEC,IAAI,GACZ,KAAQ,CAAEA,IAAI,GACd,aAAc,CAAEA,IAAI,IAgBXC,EAAuD,CAChEC,QAAS,OACTC,OAAQ,CACJC,KAAM,CACFC,GAAI,CACAC,MAAO,YAGfC,QAAS,CACLL,QAAS,SACTG,GAAI,CACAG,WAAY,CACRC,OAAQ,oBAGhBN,OAAQ,CACJO,OAAQ,CACJC,MAAOxB,EAAI,iCACXkB,GAAI,CAAEO,UAAW,QACrBC,IAAI,CACAF,MAAOlB,OAInBqB,gBAAiB,CACbC,OAAQ,CACJC,GAAI,OACJC,IAAK,CAACC,EAASC,KAAUC,OApCrBhC,EAoCgC8B,EAAQG,UAnCxDC,MAAM,IAAIC,QAAQC,oFAAoB,CAClCC,OAAQ,OACRC,QAAS,CAAE,OAAU,oBACrBC,KAAK,aAAD,OAAevC,EAAf,SAEHwC,MAAKC,GAAQA,EAAKC,SANP1C,OAqCJ2C,OAAQ,CACJtB,OAAQ,eACRuB,QAAS,CACLC,aAAO,CAACf,EAASC,KAAmB,CAAEe,OAAQf,EAAMU,KAAKK,OAAOC,WAGxEC,QAAS,CACL3B,OAAQ,UACRuB,QAAS,CAACd,EAAQC,IAAUkB,QAAQC,IAAInB,EAAMU,SAI1DU,aAAc,CACVrC,QAAS,SACTG,GAAI,CACAO,UAAW,CAAC,CACR4B,KAAOtB,GAAiC,QAAUA,EAAQgB,OAC1DzB,OAAQ,QAEZ,CACI+B,KAAOtB,GAAiC,eAAiBA,EAAQgB,OACjEzB,OAAQ,eAEZ,CACI+B,KAAOtB,GAAiC,SAAWA,EAAQgB,OAC3DzB,OAAQ,WAGhBN,OAAQ,CACJO,OAAQ,CACJC,MAAOtB,aAAM6B,IAAD,CACR3B,KAAM,QACNC,MAAM,aAKtBiD,YAAa,CACTvC,QAAS,SACTG,GAAI,CAAEO,UAAW,OACjBT,OAAQ,CACJO,OAAQ,CACJC,MAAOtB,aAAM6B,IAAD,CACR3B,KAAM,QACNC,MAAM,qCAItBkD,IAAK,CACDxC,QAAS,SACTG,GAAI,CACAG,WAAY,CAAC,CACTgC,KAAOtB,GAAY,WAAaxB,EAAQwB,EAAQG,YAAc,IAC9DW,QAASC,aAAQf,IAAqB,CAAEvB,OAAQD,EAAQwB,EAAQG,WAAW1B,WAC3Ec,OAAQ,OAGZ,CAAEA,OAAQ,cAEdN,OAAQ,CACJO,OAAQ,CACJC,MAAOxB,EAAI,6BACXkB,GAAI,CAAEO,UAAW,QAErBC,IAAK,CACDF,MAAOlB,KAEXkD,QAAS,CACLhC,MAAOxB,EAAI,2BACXkB,GAAI,CAAEO,UAAW,aAI7BhB,IAAK,CACDM,QAAS,SACTG,GAAI,CACAG,WAAY,CAAC,CACTgC,KAAOtB,GAAY,QAAUxB,EAAQwB,EAAQG,YAAc,IAC3DW,QAASC,aAAQf,IAAqB,CAAEtB,IAAKF,EAAQwB,EAAQG,WAAWzB,QACxEa,OAAQ,YAGZ,CAAEA,OAAQ,cAEdN,OAAQ,CACJO,OAAQ,CACJC,MAAOtB,aAAM6B,IAAD,CACR3B,KAAM,QACNC,MAAM,OAAD,OAAS0B,EAAQvB,OAAjB,uCAETU,GAAI,CAACO,UAAW,QAEpBC,IAAK,CACDF,MAAOlB,KAEXkD,QAAS,CACLhC,MAAOxB,EAAI,2CACXkB,GAAI,CAAEO,UAAW,aAI7BgC,SAAU,CACN1C,QAAS,SACTG,GAAI,CACAG,WAAY,CAAC,CACTgC,KAAOtB,GAAY,QAAUpB,EAAaoB,EAAQG,YAAc,IAChEW,QAASC,aAAQf,IAAqB,CAAE2B,QAAS/C,EAAaoB,EAAQG,WAAWtB,QACjFU,OAAQ,iBAGZ,CACI+B,KAAOtB,GAAY,OAASpB,EAAaoB,EAAQG,YAAc,IAC/DW,QAASC,aAAQf,IAAqB,CAAE2B,QAAS/C,EAAaoB,EAAQG,WAAWrB,OACjFS,OAAQ,QAEZ,CAAEA,OAAQ,cAEdN,OAAQ,CACJO,OAAQ,CACJC,MAAOtB,aAAM6B,IAAD,CACR3B,KAAM,QACNC,MAAM,kCAEVa,GAAI,CAAEO,UAAW,QAErBC,IAAK,CACDF,MAAOlB,KAEXkD,QAAS,CACLhC,MAAOxB,EAAI,2BACXkB,GAAI,CAAEO,UAAW,aAI7Bf,KAAM,CACFK,QAAS,SACTG,GAAI,CACAG,WAAY,CAAC,CACTgC,KAAOtB,GAAY,SAAWxB,EAAQwB,EAAQG,YAAc,IAC5DW,QAASC,aAAQf,IAAqB,CAAErB,KAAMH,EAAQwB,EAAQG,WAAWxB,SACzEY,OAAQ,gBAGZ,CAAEA,OAAQ,cAEdN,OAAQ,CACJO,OAAQ,CACJC,MAAOtB,aAAM6B,IAAD,CACR3B,KAAM,QACNC,MAAM,qCAEVa,GAAI,CAAEO,UAAW,QAErBC,IAAK,CACDF,MAAOlB,KAEXkD,QAAS,CACLhC,MAAOxB,EAAI,2CACXkB,GAAI,CAAEO,UAAW,aAI7BkC,aAAc,CACV5C,QAAS,SACTG,GAAI,CACAG,WAAY,CAAC,CACTgC,KAAOtB,GAAY,QAAUpB,EAAaoB,EAAQG,YAAc,IAChEW,QAASC,aAAQf,IAAqB,CAAE2B,QAAS/C,EAAaoB,EAAQG,WAAWtB,QACjFU,OAAQ,WAGZ,CACI+B,KAAOtB,GAAY,OAASpB,EAAaoB,EAAQG,YAAc,IAC/DW,QAASC,aAAQf,IAAqB,CAAE2B,QAAS/C,EAAaoB,EAAQG,WAAWrB,OACjFS,OAAQ,OAEZ,CAAEA,OAAQ,cAEdN,OAAQ,CACJO,OAAQ,CACJC,MAAOtB,aAAM6B,IAAD,CACR3B,KAAM,QACNC,MAAM,gDAAD,OAAkD0B,EAAQvB,OAA1D,eAAuEuB,EAAQtB,IAA/E,eAAyFsB,EAAQrB,KAAjG,SAETQ,GAAI,CAAEO,UAAW,QAErBC,IAAK,CACDF,MAAOlB,KAEXkD,QAAS,CACLhC,MAAOxB,EAAI,0BACXkB,GAAI,CAAEO,UAAW,aAI7BmC,cAAe,CACX7C,QAAS,SACTG,GAAI,CACAG,WAAY,CAAC,CACTgC,KAAOtB,GAAY,QAAUpB,EAAaoB,EAAQG,YAAc,IAChEW,QAASC,aAAQf,IAAqB,CAAE2B,QAAS/C,EAAaoB,EAAQG,WAAWtB,QACjFU,OAAQ,WAGZ,CACI+B,KAAOtB,GAAY,OAASpB,EAAaoB,EAAQG,YAAc,IAC/DW,QAASC,aAAQf,IAAqB,CAAE2B,QAAS/C,EAAaoB,EAAQG,WAAWrB,OACjFS,OAAQ,OAEZ,CAAEA,OAAQ,cAEdN,OAAQ,CACJO,OAAQ,CACJC,MAAOtB,aAAM6B,IAAD,CACR3B,KAAM,QACNC,MAAM,gDAAD,OAAkD0B,EAAQvB,OAA1D,eAAuEuB,EAAQtB,IAA/E,2BAETS,GAAI,CAAEO,UAAW,QAErBC,IAAK,CACDF,MAAOlB,KAEXkD,QAAS,CACLhC,MAAOxB,EAAI,0BACXkB,GAAI,CAAEO,UAAW,aAI7BoC,QAAS,CACL9C,QAAS,SACTG,GAAI,CAAEO,UAAW,SACjBT,OAAQ,CACJO,OAAQ,CAACC,MAAOxB,EAAI,yCAG5B8D,MAAO,CACH1D,KAAM,SAEV2D,KAAM,CACFhD,QAAS,SACTC,OAAQ,CACJO,OAAQ,CAAEC,MAAOxB,EAAI,sDAEzBkB,GAAI,CAAEO,UAAW,SAErBuC,MAAO,CACHjD,QAAS,SACTC,OAAQ,CACJO,OAAQ,CAAEC,MAAOxB,EAAI,uCAEzBkB,GAAI,CAAEO,UAAW,W,oBC1U7BwC,YAAQ,CACJC,IAAK,iCACLC,QAAQ,IAMZ,MAAMC,EAAUC,YAAmC,CAC/CxC,GAAI,OACJzB,KAAM,WACNY,OAAQ,CACJsD,GAAG,eACIxD,GAEPyD,OAAQ,CACJxD,QAAS,OACTC,OAAQ,CACJwD,KAAM,CACFtD,GAAI,CACAuD,OAAQ,cACRC,MAAO,CACHpD,OAAQ,WACRuB,QAASC,aAAO,CAAC3C,EAAU6B,KAAmB,CAAE2C,UAAW3C,EAAM3B,aAI7EuE,YAAa,CACvB7D,QAAS,WACKS,MAAO,WACPqD,KAAM,UACN3D,GAAI,CACA4D,UAAW,CACPjC,QAAS,CAAC,eACNC,aAAO,CAAC3C,EAAU6B,KAAmB,CAAEE,UAAWF,EAAM3B,WAC5DiB,OAAQ,UAEZD,WAAY,QAEhBL,OAAQ,CACrB+D,SAAU,GAEOC,MAAO,CACHxD,MAAOtB,YAAK,iBAIxB+E,SAAU,CACNzD,MAAO,WACPN,GAAI,CACAO,UAAW,aAO/B,CACIoB,QAAS,CACLqC,aAAenD,IAEXmB,QAAQC,IAAI,WAAapB,EAAQG,YAErCiD,KAAM,KACFjC,QAAQC,IAAI,SAEhBiC,UAAYrD,IAERmB,QAAQC,IAAI,kBAAoBpB,EAAQsD,QAAQtC,OAAOC,UAUjEsC,EAAkBC,IACpB,QAAQ,GACJ,KAAKA,EAAMC,MAAMC,QAAQ,CAAElB,OAAQ,gBAC/B,OACI,gDAAQnE,KAAK,SAASsF,UAAU,gBAC5BC,MAAO,CAAEC,UAAW,uBAA4BL,GADpD,+BAKR,KAAKA,EAAMC,MAAMC,QAAQ,CAAElB,OAAQ,aAC/B,OACI,gDAAQnE,KAAK,SAASsF,UAAU,gBAC5BC,MAAO,CAAEC,UAAW,0BAA+BL,GADvD,8BAKR,QACI,OACI,gDAAQnF,KAAK,SAASsF,UAAU,iBAAoBH,GAApD,mCAOhB,SAASM,IAAO,MAAD,EACyBC,6BAAmB,CACnDC,MAAO,KACH7F,EAAK,gBAFL8F,EADG,EACHA,MAAOC,EADJ,EACIA,OADJ,KACYhB,SAKaiB,+BAAqB,CACrDC,SAAWC,IACPlG,EAAK,CAAEE,KAAM,YAAaC,MAAO+F,QAFjC9F,EANG,EAMHA,OAAmB+F,GANhB,EAMKC,UANL,EAMgBD,MANhB,EAWsBE,YAAWnC,EAAS,CACjDoC,UAAU,EACV3D,QAAS,CACL4D,SAAUC,aAAS,KACfxD,QAAQC,IAAI,qCACZ7C,EAAO,CACHqG,gBAAgB,EAChBC,YAAY,OAGpBC,QAASH,aAAS,KACdxD,QAAQC,IAAI,wBACZkD,OAEJS,aAAcJ,aAAU3E,IACpBmB,QAAQC,IAAI,iBACZ4D,SAASvE,KAAKmD,MAAMqB,WAAajF,EAAQG,aAE7C+E,SAAUP,aAAS,CAAC3E,EAASmF,KACzBhE,QAAQC,IAAI,eACZ6C,EAAM,CAAE/F,KAAM8B,EAAQ4C,eAE1BwC,UAAWT,aAAS,CAAC3E,EAASmF,KAC1BhE,QAAQC,IAAI,eACZ8C,UAnCD,mBAWJmB,EAXI,KAWKlH,EAXL,UA6CX,OACI,qBAAKwF,UAAU,MAAf,SACI,cAACJ,EAAD,CAAgBE,MAAO4B,EAASC,QAAS,IAAMnH,EAAK,aAShE,MAUMoH,EAAcP,SAASQ,eAAe,QAC5CC,SACI,cAAC3B,EAAD,IACAyB,K","file":"static/js/main.e9bd781f.chunk.js","sourcesContent":["import { MachineConfig, Machine, send, Action, assign } from \"xstate\";\nimport \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string,   } } = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Daniel\": { person: \"Daniel Skantz\" },\n    \"Emma\": { person: \"Emma Stone\" },\n    \"on Monday\": { day: \"Monday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"on Friday\": { day: \"Friday\" },\n    \"at eight\": { time: \"8:00\" },\n    \"at nine\": { time: \"9:00\" },\n    \"at ten\": { time: \"10:00\" },\n    \"at eleven\": { time: \"11:00\" },\n    \"at twelve\": { time: \"12:00\" },\n    \"at thirteen\": { time: \"13:00\" },\n    \"at fourteen\": { time: \"14:00\" },\n    \"at fifteen\": { time: \"15:00\" },\n    \"at sixteen\": { time: \"16:00\" },\n    \"at seventeen\": { time: \"17:00\" },\n    \"at eightteen\": { time: \"18:00\" },\n}\n\nconst closedAnswer: { [index: string]: {yes?: boolean, no?: boolean}} = {\n    \"yes\": { yes: true },\n    \"yep\": { yes: true },\n    \"of course\": { yes: true },\n    \"sure\": { yes: true },\n    \"no\": { no: false },\n    \"nope\": { no: false },\n    \"not really\": { no: false}\n}\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = \"https://lab2-for-ds.herokuapp.com/model/parse\"\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({   \n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n        welcome: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: {\n                    target: 'rasa_invocation'\n                }\n            },\n            states: {\n                prompt: { \n                    entry: say(\"What do you would like to do?\"),\n                    on: { ENDSPEECH: \"ask\"} },\n                ask:{\n                    entry: listen()\n                },\n            }\n        },\n        rasa_invocation: {\n            invoke: {\n                id: 'rasa',\n                src: (context, event) => nluRequest(context.recResult),\n                onDone: {\n                    target: 'intent_check',\n                    actions: [\n                        assign((context, event) => { return { intent: event.data.intent.name } }),\n                    ],\n                },\n                onError: {\n                    target: 'welcome',\n                    actions: (context,event) => console.log(event.data),\n                },\n            }\n        },\n        intent_check: {\n            initial: \"prompt\",\n            on: { \n                ENDSPEECH: [{\n                    cond: (context: { intent: string; }) => \"todo\" == context.intent,\n                    target: 'todo',\n                },\n                {\n                    cond: (context: { intent: string; }) => \"appointment\" == context.intent,\n                    target: 'appointment',\n                },\n                {\n                    cond: (context: { intent: string; }) => \"timer\" == context.intent,\n                    target: 'timer',\n                }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK.`\n                    })),\n            },\n            }\n        },\n        appointment: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let's create an appointment`\n                    }))\n                }}\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on: { \n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \"duration\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`\n                    })),\n                    on: {ENDSPEECH: \"ask\"}\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I am not sure which day you mean\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        duration: {\n            initial: \"prompt\",\n            on: { \n                RECOGNISED: [{\n                    cond: (context) => \"yes\" in (closedAnswer[context.recResult] || {}),\n                    actions: assign((context) => { return { confirm: closedAnswer[context.recResult].yes } }),\n                    target: \"confirm_whole\",\n\n                },\n                {\n                    cond: (context) => \"no\" in (closedAnswer[context.recResult] || {}),\n                    actions: assign((context) => { return { confirm: closedAnswer[context.recResult].no } }),\n                    target: \"time\",\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Will it take the whole day?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I didn't get it.\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                },\n                }\n            },\n        time: {\n            initial: \"prompt\",\n            on: { \n                RECOGNISED: [{\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                    target: \"confirm_time\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. What time is your meeting?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I am not sure what time you mean\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                },\n            }\n        },\n        confirm_time: {\n            initial: \"prompt\",\n            on: { \n                RECOGNISED: [{\n                    cond: (context) => \"yes\" in (closedAnswer[context.recResult] || {}),\n                    actions: assign((context) => { return { confirm: closedAnswer[context.recResult].yes } }),\n                    target: \"created\",\n\n                },\n                {\n                    cond: (context) => \"no\" in (closedAnswer[context.recResult] || {}),\n                    actions: assign((context) => { return { confirm: closedAnswer[context.recResult].no } }),\n                    target: \"who\",\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I didn't get it\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                },\n            }\n        },\n        confirm_whole: {\n            initial: \"prompt\",\n            on: { \n                RECOGNISED: [{\n                    cond: (context) => \"yes\" in (closedAnswer[context.recResult] || {}),\n                    actions: assign((context) => { return { confirm: closedAnswer[context.recResult].yes } }),\n                    target: \"created\",\n\n                },\n                {\n                    cond: (context) => \"no\" in (closedAnswer[context.recResult] || {}),\n                    actions: assign((context) => { return { confirm: closedAnswer[context.recResult].no } }),\n                    target: \"who\",\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want me to create an appointment with ${context.person} on ${context.day} for the whole day?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I didn't get it\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                },\n            }\n        },\n        created: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"final\" },\n            states: {\n                prompt: {entry: say('Your appointment has been created.')}\n            }\n        },\n        final: {\n            type: 'final'\n        },\n        todo: {\n            initial: 'prompt',\n            states: {\n                prompt: { entry: say(\"OK. What do you want me to add to the todo list?\")}\n            },\n            on: { ENDSPEECH: \"init\" }\n        },\n        timer: {\n            initial: 'prompt',\n            states: {\n                prompt: { entry: say(\"OK. I can set up a timer for you.\")}\n            },\n            on: { ENDSPEECH: \"init\" }\n        },\n    }\n})\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, send, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmAppointment\";\n\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n\t\t    initial: 'progress',\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle'\n                    },\n                    states: {\n\t\t    \tprogress: {\n\t\t\t},\t    \t\t\t\t\t\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a color command.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://rasa-nlu-api-00.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}